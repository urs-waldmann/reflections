What happens when you initialize a repository? Why do you need to do it?
I initialize a repository by the command git init. I have to be in the directory of the folder that I want to become a repository. Then a repository is initialized in that directory. There are no commits yet and no files included in the repository (even if there are files in the directory). I can check the status of the repository by running the command git status.
I need to do this in order to make a directory a repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
At the moment I am not quite sure about that since I haven't completly understood the function of the staging area. But I think it is valuebale in the sense that I can make different commits to the same repository that have different logical purposes. Furthermore it is the intermediate area between the working directory and the repository.

How can you use the staging area to make sure you have one commit per logical change?
I can add all files of one logical change to the staging area and commit them. Then I can add all files of another logical change to the staging area and commit them, too. And so on...

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
If I wanto to experiment on new features or implement a new language. Then I can test those things in the new branch while the master branch remains unmodified.

How do the diagrams help you visualize the branch structure?
First of all the diagrams help me visualizing which branches I have. In addition I immediately see which commits I can access by git log of any branch. Plus they help me visualizing when (at which commit of the master branch) a new branch started.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result is that we have a "new branch" that contains all the commits of the previously seperate two branches. This means that we can checkout all the commits of the two branches that are now merged together. That's why it is clear why we represent it in the way we do. Because the "new branch" has two parent branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
pros automatic merging: takes less time
cons automatic merging: merges wrong things
pros merging manually: I decide what to merge
cons merging automatically: takes more time
